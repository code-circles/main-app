# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

# A lot of this came from
# https://dev.to/mpocock1/how-to-cache-nodemodules-in-github-actions-with-yarn-24eh
name: Node.js CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # Must match production node environment on Heroku
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache `./node_modules`
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Cache `./next/cache`
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**//package-lock.json') }}

      - name: npm Install
        run: npm install

      - name: Lint with Prettier
        run: npm run lint

        ########################################################################
        # Optional Typescript Strict Type Checking
        #
        # Wow... There is a finely nuanced difference between a pull_request
        # event and a push event, I believe the pull request event happens only
        # at the time of pull request creation.  Pushing to a branch that is
        # part of a pull request is just a push event. Here's a easy to see
        # what data you have access to in the github context:
        #
        #    - name: GitHub Context
        #      env:
        #        GITHUB_CONTEXT: ${{ toJSON(github) }}
        #      run: echo "$GITHUB_CONTEXT"

      - name: Extract Head Ref Branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

        # For a long time the following looked very reasonable to me because I
        # didn't understand that the `if` runs before the step is assigned to a
        # runner, so the local $HEAD_BRANCH variable is not available when the
        # `if` runs the check.
        #
        #    - name: Check Typescript
        #      if: ${{ startsWith('ts-', $HEAD_BRANCH) || contains('typescript', $HEAD_BRANCH) }}
        #      run: npm run types:strict
        #      env:
        #        HEAD_BRANCH: ${{ steps.extract_branch.outputs.branch }}
        #
        # Instead we have to use the `steps` context
        # which is available to us in both the job scheduler that assigns steps
        # to machines and the runners who run the tests.

      - name: Strict Typescript Check
        if: ${{ startsWith('ts-', steps.extract_branch.outputs.branch) || contains('typescript', steps.extract_branch.outputs.branch) }}
        run: npm run types:strict

        # * https://docs.github.com/en/actions/reference/events-that-trigger-workflows
        # * https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions
        # * https://docs.github.com/en/actions/reference/environment-variables
        # * https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions
        ########################################################################

      - name: Build with NextJS
        run: npm run build
