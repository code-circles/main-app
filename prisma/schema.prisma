generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int      @id @default(autoincrement())
  firstName             String?
  lastName              String?
  email                 String   @unique
  createdAt             DateTime @default(now())  @map("created_at")
  updatedAt             DateTime @updatedAt       @map("updated_at")
  authenticationMethod  AuthenticationMethod      @default(SELF)
  role                  Role                      @default(USER)
  profile               Profile?
  tasks                 Task[]
  @@map("users")
}

model Profile {
  id                    Int        @id @default(autoincrement())
  user                  User       @relation(fields: [userId], references: [id])
  userId                Int
  roleType              RoleType[]
  yearsOfExperience     Int
  frontEndTechnologies  FrontendTechnologies[]
  backEndTechnologies   BackendTechnologies[]
  databases             StorageTechnologies[]
  operations            OperationsTechnologies[]
  minimumSalary         Int
  maximumSalary         Int
  calendlyLink          String?
  projects              Project[]
  experiences           Experience[]
  linkedInUrl           String?
  githubLink            String?
  visaType              VisaType
  desiredCompanySizes   CompanySizes[]
  desiredLocations      Locations[]
  desiredSeniorities    Seniorities[]
  desiredStartupStages  StartupStages[]
}

model Task {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  title                 String   @db.VarChar(255)
  description           String   @db.VarChar(255)
  author                User?    @relation(fields: [authorId], references: [id])
  authorId              Int?
  status                TaskStatus  @default(OPEN)
}

model Project {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  title                 String   @db.VarChar(255)
  description           String   @db.VarChar(255)
  url                   String?
  from                  DateTime
  to                    DateTime
  profile               Profile?    @relation(fields: [profileId], references: [id])
  profileId             Int?
}

model Experience {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  userTitle             String   
  accomplishments       String 
  location              String
  from                  DateTime
  to                    DateTime
  profile               Profile?    @relation(fields: [profileId], references: [id])
  profileId             Int?
  type                  ExperienceType
}

model RoleType {
  id          Int               @id @default(autoincrement())
  type        RoleDescription   @default(FULLSTACK)
  profile     Profile[]         @relation(references: [id])
}

model FrontendTechnologies  {
  id          Int               @id @default(autoincrement())
  technology  FrontendTechnology  
  profile     Profile[]         @relation(references: [id])
}

model BackendTechnologies  {
  id          Int               @id @default(autoincrement())
  technology  BackendTechnology  
  profile     Profile[]         @relation(references: [id])
}

model OperationsTechnologies {
  id          Int               @id @default(autoincrement())
  technology  OperationsTechnology  
  profile     Profile[]         @relation(references: [id])
}

model StorageTechnologies {
  id          Int               @id @default(autoincrement())
  technology  StorageTechnology  
  profile     Profile[]         @relation(references: [id])
}

model Locations {
  id          Int               @id @default(autoincrement())
  location    Location
  profile     Profile[]         @relation(references: [id])
}

model StartupStages {
  id          Int               @id @default(autoincrement())
  startupStage StartupStage  
  profile     Profile[]         @relation(references: [id])
}

model CompanySizes {
  id          Int               @id @default(autoincrement())
  companySize CompanySize  
  profile     Profile[]         @relation(references: [id])
}

model Seniorities {
  id          Int               @id @default(autoincrement())
  seniority   Seniority  
  profile     Profile[]         @relation(references: [id])
}

enum ExperienceType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum VisaType {
  NEW_H1B
  TRANSFER_H1B
  TN_VISA
  F1
  NONE
}

enum Location {
  REMOTE
  BAY_AREA
  NEW_YORK
  AUSTIN
  DENVER
  SEATTLE
  BOSTON
  WASHINGTON
  SAN_DIEGO
  LOS_ANGELES
  DALLAS
  CHICAGO
  HOUSTON
  PHOENIX
  PHILADELPHIA
}

enum BackendTechnology {
  CSHARP
  DJANGO
  DOTNET
  ELIXIR
  JAVA
  KAFKA
  NODE
  NEST
  NEXT
  PHP
  PYTHON
  RABBITMQ
  RAILS
  RUBY
}

enum OperationsTechnology {
  ANSIBLE
  AWS
  AZURE
  DIGITALOCEAN
  DOCKER
  GCS
  KUBERNETES  
  TERRAFORM
}

enum StorageTechnology {
  CASSANDRA
  COUCHDB
  DYNAMODB
  MEMCACHED
  MONGODB
  MSSQL
  MYSQL
  NOSQL
  ORACLE
  POSTGRES
  REDIS  
}

enum FrontendTechnology {
  ANGULAR
  EMBER
  FLOW
  JAVASCRIPT
  NEXT
  REACT
  TYPESCRIPT  
  VUE  
}

enum RoleDescription {
  FRONTEND
  BACKEND 
  FULLSTACK
  MACHINE_LEARNING
  DATA_SCIENCE
  INFRASTRUCTURE
  SRE
  DEVOPS
  QA
  SECURITY
  QA_MANAGER
  DIRECTOR
  VPE
}

enum Role {
  USER
  EMPLOYER
  MENTOR
  ADMIN
}

enum AuthenticationMethod {
  SELF
  LINKEDIN
}

enum TaskStatus {
  OPEN
  DELETED
  COMPLETED
}

enum StartupStage {
  SEED
  SERIES_A
  SERIES_B
  SERIES_C
  SERIES_D
  SERIES_E
  SERIES_F
  PUBLIC
  NO_PREFERENCE
}

enum CompanySize {
  RANGE_1_10
  RANGE_11_30
  RANGE_31_100
  RANGE_100_250
  RANGE_250_500
  RANGE_500_1000
  RANGE_1000_PLUS
  NO_PREFERENCE
}

enum Seniority {
  JUNIOR
  INTERMEDIATE
  SENIOR
  STAFF
  PRINCIPAL
  MANAGER
  VPE
  DIRECTOR
}