generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int      @id @default(autoincrement())
  firstName             String?
  lastName              String?
  email                 String   @unique
  createdAt             DateTime @default(now())  @map("created_at")
  updatedAt             DateTime @updatedAt       @map("updated_at")
  authenticationMethod  AuthenticationMethod      @default(SELF)
  role                  Role                      @default(USER)
  profile               Profile?
  tasks                 Task[]
  @@map("users")
}

model Profile {
  id                Int        @id @default(autoincrement())
  user              User       @relation(fields: [userId], references: [id])
  userId            Int
  roleType          RoleType[]
  yearsOfExperience Int
  frontEndTechnologies FrontendTechnology[]
  backEndTechnologies  BackendTechnology[]
  databases         StorageTechnology[]
  operations        OperationsTechnology[]
  locationsWanted   LocationWanted[]
  minimumSalary     Int
  maximumSalary     Int
  calendlyLink      String?
  projects          Project[]
  experiences       Experience[]
  linkedinUrl       String?
  githubLink        String?
  visaType          VisaType
  companySize       CompanySizes[]
  seniority         SeniorityDesired[]
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title              String   @db.VarChar(255)
  description        String   @db.VarChar(255)
  author             User?    @relation(fields: [authorId], references: [id])
  authorId           Int?
  status             TaskStatus  @default(OPEN)
}

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title              String   @db.VarChar(255)
  description        String   @db.VarChar(255)
  url                String?
  from               DateTime
  to                 DateTime
  profile            Profile?    @relation(fields: [profileId], references: [id])
  profileId          Int?
}

model Experience {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userTitle        String   
  accomplishments  String 
  location         String
  from             DateTime
  to               DateTime
  profile          Profile?    @relation(fields: [profileId], references: [id])
  profileId        Int?
  type             ExperienceType
}

model RoleType {
  id      Int               @id @default(autoincrement())
  type    RoleDescription   @default(FULLSTACK)
  profile Profile[]         @relation(references: [id])
}

model FrontendTechnology  {
  id          Int               @id @default(autoincrement())
  technology  FrontendTechnologies  
  profile     Profile[]         @relation(references: [id])
}

model BackendTechnology  {
  id          Int                @id @default(autoincrement())
  technology  BackendTechnologies  
  profile     Profile[]          @relation(references: [id])
}

model OperationsTechnology {
  id          Int                 @id @default(autoincrement())
  technology  OperationsTechnologies  
  profile     Profile[]           @relation(references: [id])
}

model StorageTechnology {
  id          Int                 @id @default(autoincrement())
  technology  StorageTechnologies  
  profile     Profile[]           @relation(references: [id])
}

model LocationWanted {
  id                  Int               @id @default(autoincrement())
  location            Locations  
  profile Profile[]   @relation(references: [id])
}

model CompanySizes {
  id                  Int               @id @default(autoincrement())
  company             CompanySize  
  profile Profile[]   @relation(references: [id])
}

model SeniorityDesired {
  id                  Int               @id @default(autoincrement())
  seniority           Seniority  
  profile Profile[]   @relation(references: [id])
}

enum ExperienceType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum VisaType {
  NEW_H1B
  TRANSFER_H1B
  TN_VISA
  F1
  NONE
}

enum Locations {
  REMOTE
  BAY_AREA
  NEW_YORK
  AUSTIN
  DENVER
  SEATTLE
  BOSTON
  WASHINGTON
  SAN_DIEGO
  LOS_ANGELES
  DALLAS
  CHICAGO
  HOUSTON
  PHOENIX
  PHILADELPHIA
}

enum BackendTechnologies {
  CSHARP
  DJANGO
  DOTNET
  ELIXIR
  JAVA
  KAFKA
  NODE
  NEST
  NEXT
  PHP
  PYTHON
  RABBITMQ
  RAILS
  RUBY
}

enum OperationsTechnologies {
  ANSIBLE
  AWS
  AZURE
  DIGITALOCEAN
  DOCKER
  GCS
  KUBERNETES  
  TERRAFORM
}

enum StorageTechnologies {
  CASSANDRA
  COUCHDB
  DYNAMODB
  MEMCACHED
  MONGODB
  MSSQL
  MYSQL
  NOSQL
  ORACLE
  POSTGRES
  REDIS  
}

enum FrontendTechnologies {
  ANGULAR
  EMBER
  FLOW
  JAVASCRIPT
  NEXT
  REACT
  TYPESCRIPT  
  VUE  
}

enum RoleDescription {
  FRONTEND
  BACKEND 
  FULLSTACK
  MACHINE_LEARNING
  DATA_SCIENCE
  INFRASTRUCTURE
  SRE
  DEVOPS
  QA
  SECURITY
}

enum Role {
  USER
  EMPLOYER
  MENTOR
  ADMIN
}
enum AuthenticationMethod {
  SELF
  LINKEDIN
}

enum TaskStatus {
  OPEN
  DELETED
  COMPLETED
}

enum Seniority {
  JUNIOR
  INTERMEDIATE
  SENIOR
  MANAGER
  VPE
  DIRECTOR
}

enum CompanySize {
  SEED_10
  SERIES_A_10_30
  SERIES_B_30_100
  SERIES_C_D_E_F_100_PLUS
  PUBLIC_COMPANY
  NO_PREFERENCE
}